amends "pkl/velocity.pkl"

import "pkl/velocity.pkl"
import "pkl/prebuilts/git.pkl"
import "pkl/prebuilts/build.pkl"

local golangApps = List(
    List("cli", "dist/velocity"),
    List("api", "dist/api"),
    List("agent", "dist/agent"),
    List("ui", "dist/ui")
)

local install_pkl = velocity.shell(
    "curl -L -o pkl https://github.com/apple/pkl/releases/download/0.25.2/pkl-alpine-linux-amd64 && chmod +x ./pkl"
)

tests {
    new {
        name = "Golang tests"
        commands {
            git.clone()
            velocity.shell("go test ./...")
        }
    }
    new {
        name = "Pkl"
        commands {
            git.clone()
            install_pkl
            velocity.shell("make PKL_BINARY=./pkl pkl-test")
        }
    }
    new {
        name = "Docs can build"
        commands {
            git.cloneExact(new git.CloneExactArgs {
                directory = "docs"
            })
            velocity.shell("cd docs")
            velocity.shell("npm install")
            velocity.shell("npm build")
        }
    }
    new {
        name = "Doc tests"
        commands {
            git.cloneExact(new git.CloneExactArgs {
                directory = "docs"
            })
            velocity.shell("cd docs")
            velocity.shell("npm install")
            // TODO: Add tests for docs
        }
    }
}

runtimes {
    new DockerRuntime {
        name = "golang"
        image = "golang:1.21"
    }
    new DockerRuntime {
        name = "curl"
        image = "curlimages/curl:8.6.0"
    }
    new DockerRuntime {
        name = "node"
        image = "node:21"
    }
    // Minimal runtime for static http server
    new DockerRuntime {
        name = "busybox"
        image = "busybox:1.35"
    }
}

workflows {
    new {
        name = "Main app"
        groups {
            new {
                name = "Golang tests"
                runtimes {
                    "golang"
                }
                tests {
                    "Golang tests"
                }
            }
            new {
                name = "Pkl"
                runtimes {
                    "curl"
                }
                tests {
                    "Pkl"
                }
            }
        }
    }
    new {
        name = "Docs"
        groups {
            new {
                name = "Build"
                runtimes {
                    "node"
                }
                tests {
                    "Docs can build"
                    "Doc tests"
                }
            }
        }
    
    }
}

local function createGolangBuild(n: String, o: String) = new Build {
    name = n
    build_runtime = "golang"
    output = o

    output_runtime = "golang"
    output_command = o

    commands {
        git.clone()
        velocity.shell("make build-\(name)")
    }
}

builds {
    for (g in golangApps) {
        createGolangBuild(g[0], g[1])
    }
    new {
        name = "Docs"
        build_runtime = "node"
        output = "docs/build"

        output_runtime = "busybox"
        output_command = "busybox httpd -f -v"

        commands {
            git.cloneExact(new git.CloneExactArgs {
                directory = "docs"
            })
            velocity.shell("cd docs")
            velocity.shell("npm install")
            velocity.shell("npm build")
        }
    }
}

local function createGolangDeployment(n: String) = new Deployment {
    name = n
    runtime = "golang" // TODO: replace with an image that can just post the binary

    workflows {
        "Main app"
    }

    commands {
        build.create(n)
    }
}

deployments {
    for (g in golangApps) {
        createGolangDeployment(g[0])
    }
    new {
        name = "Docs"
        runtime = "golang" // TODO: Same as the above TODO

        workflows {
            "Main app"
        }

        commands {
            build.create("cli") 
        }
    }
}